from dataclasses import dataclass
from typing import List
import streamlit as st
from decimal import Decimal

@dataclass
class Categoria:
    nome: str
    emoji: str
    orcamento_mensal: Decimal
    gasto_mensal: Decimal
    descricao: str

    @property
    def utilizacao(self) -> float:
        """Calcula a porcentagem de utiliza√ß√£o do or√ßamento."""
        if self.gasto_mensal == 0:
            return 0.0
        return (self.gasto_mensal / self.orcamento_mensal) * 100

    def to_html(self) -> str:
        """Gera a representa√ß√£o HTML da categoria."""
        return f"""
            <h5 style="margin: 0;">{self.nome} {self.emoji}</h5>
            <p style="margin: 0;"><cite>{self.descricao}</cite></p>
            <p style="margin: 0;"><strong>Or√ßamento Mensal:</strong> R${self.orcamento_mensal:,.2f}</p>
            <p style="margin: 0;"><strong>Gasto Mensal:</strong> R${self.gasto_mensal:,.2f}</p>
            <p style="margin: 0;"><strong>Utiliza√ß√£o:</strong> {self.utilizacao:.2f}%</p>
        """

def render_categoria(categoria: Categoria) -> None:
    """Renderiza uma categoria no Streamlit."""
    with st.container(height=180, border=True):
        st.markdown(categoria.to_html(), unsafe_allow_html=True)

# Dados das categorias
CATEGORIAS_DATA = [
    {
        "nome": "Entretenimento",
        "emoji": "üéâ",
        "orcamento_mensal": Decimal("1000"),
        "gasto_mensal": Decimal("1000"),
        "descricao": "Lazer, Jogos, Cinema etc..."
    },
    {
        "nome": "Transporte",
        "emoji": "üöó",
        "orcamento_mensal": Decimal("1000"),
        "gasto_mensal": Decimal("1000"),
        "descricao": "Transporte, Viagem, Gasolina etc..."
    },
    {
        "nome": "Alimenta√ß√£o",
        "emoji": "üçî",
        "orcamento_mensal": Decimal("1000"),
        "gasto_mensal": Decimal("1000"),
        "descricao": "Mercado, Restaurante, Lanches etc..."
    },
    {
        "nome": "Educa√ß√£o",
        "emoji": "üìö",
        "orcamento_mensal": Decimal("1000"),
        "gasto_mensal": Decimal("1000"),
        "descricao": "Cursos, Livros, Palestras etc..."
    },
    {
        "nome": "Casa",
        "emoji": "üè†",
        "orcamento_mensal": Decimal("1000"),
        "gasto_mensal": Decimal("1000"),
        "descricao": "Aluguel, Pet, Manuten√ß√£o, Internet..."
    },
    {
        "nome": "Sa√∫de",
        "emoji": "üíä",
        "orcamento_mensal": Decimal("1000"),
        "gasto_mensal": Decimal("1000"),
        "descricao": "Farm√°cia, Consulta, Medicamentos, Autocuidado etc..."
    },
    {
        "nome": "Compras",
        "emoji": "üëó",
        "orcamento_mensal": Decimal("1000"),
        "gasto_mensal": Decimal("1000"),
        "descricao": "Roupas, Sapatos, Acess√≥rios, Eletronicos etc..."
    },
    {
        "nome": "Investimento",
        "emoji": "üí∞",
        "orcamento_mensal": Decimal("1000"),
        "gasto_mensal": Decimal("1000"),
        "descricao": "Investimentos, Poupan√ßa, A√ß√µes etc..."
    }
]

def main():
    categorias = [Categoria(**data) for data in CATEGORIAS_DATA]
    for categoria in categorias:
        render_categoria(categoria)

if __name__ == "__main__":
    main()